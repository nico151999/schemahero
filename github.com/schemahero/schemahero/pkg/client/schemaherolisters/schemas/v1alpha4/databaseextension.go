/*
Copyright 2021 The SchemaHero Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha4

import (
	v1alpha4 "github.com/schemahero/schemahero/pkg/apis/schemas/v1alpha4"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatabaseExtensionLister helps list DatabaseExtensions.
// All objects returned here must be treated as read-only.
type DatabaseExtensionLister interface {
	// List lists all DatabaseExtensions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha4.DatabaseExtension, err error)
	// DatabaseExtensions returns an object that can list and get DatabaseExtensions.
	DatabaseExtensions(namespace string) DatabaseExtensionNamespaceLister
	DatabaseExtensionListerExpansion
}

// databaseExtensionLister implements the DatabaseExtensionLister interface.
type databaseExtensionLister struct {
	indexer cache.Indexer
}

// NewDatabaseExtensionLister returns a new DatabaseExtensionLister.
func NewDatabaseExtensionLister(indexer cache.Indexer) DatabaseExtensionLister {
	return &databaseExtensionLister{indexer: indexer}
}

// List lists all DatabaseExtensions in the indexer.
func (s *databaseExtensionLister) List(selector labels.Selector) (ret []*v1alpha4.DatabaseExtension, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha4.DatabaseExtension))
	})
	return ret, err
}

// DatabaseExtensions returns an object that can list and get DatabaseExtensions.
func (s *databaseExtensionLister) DatabaseExtensions(namespace string) DatabaseExtensionNamespaceLister {
	return databaseExtensionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabaseExtensionNamespaceLister helps list and get DatabaseExtensions.
// All objects returned here must be treated as read-only.
type DatabaseExtensionNamespaceLister interface {
	// List lists all DatabaseExtensions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha4.DatabaseExtension, err error)
	// Get retrieves the DatabaseExtension from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha4.DatabaseExtension, error)
	DatabaseExtensionNamespaceListerExpansion
}

// databaseExtensionNamespaceLister implements the DatabaseExtensionNamespaceLister
// interface.
type databaseExtensionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatabaseExtensions in the indexer for a given namespace.
func (s databaseExtensionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha4.DatabaseExtension, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha4.DatabaseExtension))
	})
	return ret, err
}

// Get retrieves the DatabaseExtension from the indexer for a given namespace and name.
func (s databaseExtensionNamespaceLister) Get(name string) (*v1alpha4.DatabaseExtension, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha4.Resource("databaseextension"), name)
	}
	return obj.(*v1alpha4.DatabaseExtension), nil
}
